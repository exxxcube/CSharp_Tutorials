You can represent abstractions in two ways in C#: with abstract classes or
with C# interfaces. The two have differences that can affect your choice of
which one to use:
 ✦ Use an abstract class when you can profitably share an implementation
with subclasses — the abstract base class can contribute real code that
its subclasses can use by inheritance. For instance, maybe class Robot
can handle part of the robot’s tasks, just not movement.
 An abstract class doesn’t have to be completely abstract. Though it has
to have at least one abstract, unimplemented method or property, some
can provide implementations (bodies). Using an abstract class to provide an implementation for its subclasses to inherit prevents duplication
of code. That’s always a good thing.
 ✦ Use an interface when you can’t share any implementation or your
implementing class already has a base class.
 C# interfaces are purely, totally abstract. A C# interface supplies no
implementation of any of its methods. Yet it can also add flexibility that
isn’t otherwise possible. The abstract class option may not be available
because you want to add a capability to a class that already has a base
class (that you can’t modify). For example, class Robot may already have
a base class in a library that you didn’t write and therefore can’t alter.
Interfaces are especially helpful for representing completely abstract
capabilities, such as movability or displayability, that you want to add
to multiple classes that may otherwise have nothing in common — for
example, being in the same class hierarchy.